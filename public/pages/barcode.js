// Generated by CoffeeScript 1.3.3
(function() {
  var bcode, patterns;

  bcode = '';

  patterns = [];
  console.log("KEYDOWN");

  document.onkeydown = function(evt) {
    console.log("KEYDOWN");
    var callbacks, match, pattern, selectionEnd, val, _i, _len, _ref, _ref1, _ref2;
    if (evt.keyCode === 13) {
      for (_i = 0, _len = patterns.length; _i < _len; _i++) {
        _ref = patterns[_i], pattern = _ref.pattern, callbacks = _ref.callbacks;
        match = bcode.match(pattern);
	console.log(bcode);
        if (match) {
          if ((_ref1 = (_ref2 = document.activeElement) != null ? _ref2.tagName : void 0) === 'INPUT' || _ref1 === 'TEXTAREA') {
            evt.preventDefault();
            selectionEnd = document.activeElement.selectionEnd - match[0].length;
            val = document.activeElement.value.replace(match[0].toLowerCase(), '');
            document.activeElement.value = val;
            document.activeElement.selectionEnd = selectionEnd;
          }
          _.each(callbacks, function(callback) {
	    console.log(match[0], "barcode");
            return callback(match[0]);
          });
          bcode = '';
          return;
        }
      }
      return bcode = '';
    } else {
      if (evt.keyCode !== 16) {
	console.log(bcode);
        return bcode += String.fromCharCode(evt.keyCode);
      }
    }
  };

  window.barcode = {
    regist: function(pattern, callback) {
      var found_pattern, pattern_string;
      pattern_string = pattern.toString();
      found_pattern = _.find(patterns, function(p) {
        return p.pattern.toString() === pattern_string;
      });
      if (found_pattern) {
        return found_pattern.callbacks.push(callback);
      } else {
        return patterns.push({
          pattern: pattern,
          callbacks: [callback]
        });
      }
    },
    clear: function() {
      return patterns = [];
    }
  };

}).call(this);
