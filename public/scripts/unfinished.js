// Generated by CoffeeScript 1.6.3
(function() {
  var ajax_getdata, bind_listview_row, bind_tabclick, changeStatus, check_data, check_show_barcode, check_test, create_tab, exports, formate_date, get_today, group_data, hashValue, jq_prev_find, rems_date;

  exports = this;

  exports.sort_data_key = ['今天', '昨天', '前天', '七天内', '半个月内', '一个月内', '更早'];

  hashValue = decodeURI(window.location.hash);

  check_test = function(data) {
    var fdata;
    if ((hashValue != null) && hashValue === '#notest') {
      fdata = _.reject(data, function(num) {
        return num.profile.name.indexOf('测试') !== -1;
      });
      data = fdata;
    }
    return data;
  };

  check_show_barcode = function() {
    if ((hashValue != null) && hashValue === '#barcode') {
      return 1;
    } else {
      return 0;
    }
  };

  bind_tabclick = function() {
    return $('#tab').find('div').each(function() {
      return $(this).bind('click', function() {
        if ($(this).attr('id') === 'tab_a') {
          $('#tab_a').addClass('tab_checked').removeClass('tab_init');
          $('#tab_b').addClass('tab_init').removeClass('tab_checked');
          $('#unfinishDiv').hide();
          return $('#delayDiv').show();
        } else {
          $('#tab_b').addClass('tab_checked').removeClass('tab_init');
          $('#tab_a').addClass('tab_init').removeClass('tab_checked');
          $('#delayDiv').hide();
          return $('#unfinishDiv').show();
        }
      });
    });
  };

  ajax_getdata = function(url, param) {
    return $.ajax({
      type: 'get',
      url: url,
      data: param,
      success: function(data) {
        var cdata;
        console.log(data);
        cdata = check_test(data);
        return check_data(cdata);
      },
      error: function(error) {
        return console.log(error);
      }
    });
  };

  check_data = function(tab_data) {
    var schedule_arr, schedule_group_arr, unfinished_arr, unfinished_group_arr;
    unfinished_arr = [];
    schedule_arr = [];
    $.each(tab_data, function(index, value) {
      if (value.unfinished_departments.length !== 0) {
        unfinished_arr.push(value);
      }
      if (value.schedule_departments.length !== 0) {
        return schedule_arr.push(value);
      }
    });
    schedule_group_arr = group_data(schedule_arr);
    unfinished_group_arr = group_data(unfinished_arr);
    create_tab(schedule_group_arr, 'delayTab', 'schedule_departments', 'schedule_items');
    create_tab(unfinished_group_arr, 'unfinishTab', 'unfinished_departments', 'unfinished_items');
    return bind_listview_row();
  };

  get_today = function(format) {
    var dd, mm, yy;
    yy = new Date().getFullYear();
    mm = (new Date().getMonth() + 1) < 10 ? "0" + (new Date().getMonth() + 1) : new Date().getMonth() + 1;
    dd = (new Date().getDate()) < 10 ? "0" + (new Date().getDate()) : new Date().getDate();
    if (format != null) {
      switch (format) {
        case 'yyyy/mm/dd':
          return "" + yy + "/" + mm + "/" + dd;
      }
    } else {
      return "" + yy + "-" + mm + "-" + dd;
    }
  };

  formate_date = function(date_arr) {
    if (date_arr != null) {
      return date_arr.replace(/^(\d{4})[-](\d{2})[-](\d{2})$/, "$1-$2");
    }
  };

  rems_date = function(date) {
    var d;
    if (date != null) {
      d = date.replace(/^(\d{4})[-](\d{2})[-](\d{2})$/, "$1/$2/$3");
      return (new Date("" + d + " 00:00:00")).getTime();
    }
  };

  group_data = function(data) {
    var garr, mstoday;
    mstoday = (new Date("" + (get_today('yyyy/mm/dd')) + " 00:00:00")).getTime();
    return garr = _.groupBy(data, function(num) {
      var td;
      console.log(num);
      td = rems_date(num.appeared[num.appeared.length - 1]);
      if (td >= mstoday) {
        return exports.sort_data_key[0];
      } else if (td >= mstoday - 86400000) {
        return exports.sort_data_key[1];
      } else if (td >= mstoday - 86400000 * 2) {
        return exports.sort_data_key[2];
      } else if (td >= mstoday - 86400000 * 7) {
        return exports.sort_data_key[3];
      } else if (td >= mstoday - 86400000 * 15) {
        return exports.sort_data_key[4];
      } else if (td >= mstoday - 86400000 * 30) {
        return exports.sort_data_key[5];
      } else {
        return exports.sort_data_key[6];
      }
    });
  };

  create_tab = function(data, id, type, depItem) {
    var count, dateSort, depItemName, department, di, dtext, gp, ids_arr, ids_str, idx, index, item, items, sb, sortArr, texthtml, uago_num, udata_html, vip_type, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;
    texthtml = "";
    udata_html = "";
    count = 0;
    uago_num = 0;
    $("#" + id + " >li").remove();
    vip_type = check_show_barcode();
    _ref = exports.sort_data_key;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      index = _ref[_i];
      if (data[index] == null) {
        continue;
      }
      items = data[index];
      texthtml += "<li class='wk title' data-role='list-divider'> " + index + " <span class='ui-li-count'>" + items.length + "</span></li>";
      dateSort = _.sortBy(items, function(num) {
        return num.appeared[num.appeared.length - 1];
      });
      gp = _.groupBy(dateSort, function(t) {
        return t.appeared[t.appeared.length - 1];
      });
      sb = _.map(gp, function(num, key) {
        return _.sortBy(num, function(i) {
          return i.barcode;
        });
      });
      sortArr = _.reduceRight(sb, (function(a, b) {
        return b.concat(a);
      }), []);
      for (idx = _j = 0, _len1 = sortArr.length; _j < _len1; idx = ++_j) {
        item = sortArr[idx];
        ids_arr = _.map(item[type], function(num, key) {
          return num.ids;
        });
        ids_str = ids_arr.join(',');
        texthtml += "<li class='wk contextline content_li' data-giveupurl='/records/" + item.barcode + "/departments/" + ids_str + "/giveup' data-delayurl='/records/" + item.barcode + "/departments/" + ids_str + "/reschedule'>";
        texthtml += "<div>";
        texthtml += "<div><span>" + item.appeared[item.appeared.length - 1] + "</span>\n<span>" + item.profile.name + "</span>\n<span>" + item.profile.sex + "</span>\n<span>" + item.profile.age + "</span>";
        if (vip_type === 1) {
          texthtml += "<span>" + item.barcode + "</span>";
        }
        texthtml += "</div>";
        texthtml += "<div>" + item.profile.source + "</div>";
        texthtml += "<div>";
        texthtml += "<p class='departmentDetails'>";
        _ref1 = item[type];
        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
          department = _ref1[_k];
          dtext = '';
          if ((department[depItem] != null) && department[depItem].length !== 0) {
            depItemName = [];
            _ref2 = department[depItem];
            for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
              di = _ref2[_l];
              depItemName.push(di);
            }
            dtext = " (" + (depItemName.join('，')) + ")";
          }
          texthtml += "<span>" + (department.name + dtext) + "</span>";
        }
        texthtml += "</p>";
        texthtml += "</div>";
        if (item.profile.tel != null) {
          texthtml += "<a href='tel:" + item.profile.tel + "'> </a>";
        }
        texthtml += "</li>";
      }
    }
    texthtml += "<li class='refresh_li'>刷新</li>";
    texthtml += "<li style='height:150px;background:#F0F0F0;'></li>";
    $("#" + id).append(texthtml);
    return $("#" + id).listview("refresh");
  };

  bind_listview_row = function() {
    $('#unfinishTab li.contextline').swipeDelete({
      direction: 'swiperight',
      btnTheme: 'a',
      btnLabel: '延期',
      btnClass: 'rightSwipeBtn',
      click: function(e) {
        var li, url;
        li = $(this).parent();
        $(li).css('background', '#68BEE1');
        url = $(li).attr('data-delayurl');
        changeStatus(url, li);
        return false;
      }
    });
    $('#unfinishTab li.contextline').swipeDelete({
      direction: 'swipeleft',
      btnTheme: 'a',
      btnLabel: '放弃',
      btnClass: 'leftSwipeBtn',
      click: function(e) {
        var li, url;
        li = $(this).parent();
        $(li).css('background', '#F06C70');
        url = $(li).attr('data-giveupurl');
        changeStatus(url, li);
        return false;
      }
    });
    $('#delayTab li.contextline').swipeDelete({
      direction: 'swipeleft',
      btnTheme: 'a',
      btnLabel: '放弃',
      btnClass: 'leftSwipeBtn',
      click: function(e) {
        var li, url;
        li = $(this).parent();
        $(li).css('background', 'red');
        url = $(li).attr('data-giveupurl');
        changeStatus(url, li);
        return false;
      }
    });
    $('.refresh_li').click(function() {
      return ajax_getdata('/need_check_records', []);
    });
    return $('#hook').hook({
      reloadPage: false,
      textRequired: true,
      loaderText: 'refresh...',
      reloadEl: function() {
        return ajax_getdata('/need_check_records', []);
      }
    });
  };

  jq_prev_find = function(dom, prop, findclass) {
    if ($(dom).attr(prop) === findclass) {
      return dom;
    }
    return jq_prev_find($(dom).prev(), prop, findclass);
  };

  changeStatus = function(url, dom) {
    return $.ajax({
      type: 'post',
      data: [],
      url: url,
      success: function(result) {
        var liCount, titleDom;
        titleDom = jq_prev_find(dom, 'data-role', 'list-divider');
        liCount = parseInt($(titleDom).find('.ui-li-count').text());
        liCount = liCount - 1;
        if (liCount < 1) {
          $(titleDom).remove();
        } else {
          $(titleDom).find('.ui-li-count').text(liCount);
        }
        return $(dom).remove();
      },
      error: function(error) {
        return alert('网络异常操作失败');
      }
    });
  };

  $(function() {
    bind_tabclick();
    $('#tab_b').trigger('click');
    return ajax_getdata('/need_check_records', []);
  });

  (function($) {
    $.fn.swipeDelete = function(o) {
      $(this).attr("data-swipeurl", "");
      o = $.extend({}, $.fn.swipeDelete.defaults, o);
      return this.filter("[data-swipeurl]").each(function(i, el) {
        var $e, $parent;
        $e = $(el);
        $parent = $(el).parent("ul");
        return $e.on(o.direction, function(e) {
          var $li, $swipeBtn, cnt, forword, to_url;
          $li = $(this);
          cnt = $(".ui-btn", $li).length;
          $("div.ui-btn, ." + o.btnClass, $parent).animate({
            width: "toggle"
          }, 200, function(e) {
            return $(this).remove();
          });
          if (!cnt) {
            forword = (o.direction === "swiperight" ? "rightSwipeBtn" : "leftSwipeBtn");
            to_url = (o.direction === "swiperight" ? "delayurl" : "giveup_url");
            $swipeBtn = $("<a>" + o.btnLabel + "</a>").attr({
              "data-role": "button",
              "data-mini": true,
              "data-inline": "true",
              "class": (o.btnClass === forword ? o.btnClass : o.btnClass + forword),
              "data-theme": o.btnTheme,
              href: $li.data("")
            }).on("click tap", o.click);
            $swipeBtn.prependTo($li).button();
            $li.find(".ui-btn").hide().animate({
              width: "toggle"
            }, 200);
            return $("div a:not(" + o.btnClass + ")", $li).on("click.swipe", function(e) {
              e.stopPropagation();
              e.preventDefault();
              $(this).off("click.swipe");
              return $li.removeClass("ui-btn-active").find("div.ui-btn").remove();
            });
          }
        });
      });
    };
    return $.fn.swipeDelete.defaults = {
      direction: "swiperight",
      btnLabel: "Delete",
      btnTheme: "e",
      btnClass: "rightSwipeBtn",
      click: function(e) {
        e.preventDefault();
        return $(this).parents("li").slideUp();
      }
    };
  })(jQuery);

}).call(this);
